/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace RideHailing {
  export type RideStruct = {
    rider: PromiseOrValue<string>;
    driver: PromiseOrValue<string>;
    fare: PromiseOrValue<BigNumberish>;
    rideCompleted: PromiseOrValue<boolean>;
  };

  export type RideStructOutput = [string, string, BigNumber, boolean] & {
    rider: string;
    driver: string;
    fare: BigNumber;
    rideCompleted: boolean;
  };
}

export interface RideHailingInterface extends utils.Interface {
  functions: {
    "acceptRide(uint256)": FunctionFragment;
    "cancelRide(uint256)": FunctionFragment;
    "completeRide(uint256)": FunctionFragment;
    "getPricePerMeter()": FunctionFragment;
    "getRide(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "pricePerMeter()": FunctionFragment;
    "registerUser()": FunctionFragment;
    "registeredUsers(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "requestRide(uint256)": FunctionFragment;
    "rideCount()": FunctionFragment;
    "rides(uint256)": FunctionFragment;
    "setPricePerMeter(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptRide"
      | "cancelRide"
      | "completeRide"
      | "getPricePerMeter"
      | "getRide"
      | "owner"
      | "pricePerMeter"
      | "registerUser"
      | "registeredUsers"
      | "renounceOwnership"
      | "requestRide"
      | "rideCount"
      | "rides"
      | "setPricePerMeter"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptRide",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelRide",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "completeRide",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPricePerMeter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRide",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pricePerMeter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerUser",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registeredUsers",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestRide",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "rideCount", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rides",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPricePerMeter",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "acceptRide", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cancelRide", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "completeRide",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPricePerMeter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRide", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pricePerMeter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registeredUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestRide",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rideCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rides", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPricePerMeter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "RideAccepted(address,uint256)": EventFragment;
    "RideCancelled(address,uint256)": EventFragment;
    "RideCompleted(address,uint256)": EventFragment;
    "RideRequested(address,uint256,uint256)": EventFragment;
    "UserRegistered(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RideAccepted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RideCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RideCompleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RideRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserRegistered"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RideAcceptedEventObject {
  driver: string;
  rideId: BigNumber;
}
export type RideAcceptedEvent = TypedEvent<
  [string, BigNumber],
  RideAcceptedEventObject
>;

export type RideAcceptedEventFilter = TypedEventFilter<RideAcceptedEvent>;

export interface RideCancelledEventObject {
  rider: string;
  rideId: BigNumber;
}
export type RideCancelledEvent = TypedEvent<
  [string, BigNumber],
  RideCancelledEventObject
>;

export type RideCancelledEventFilter = TypedEventFilter<RideCancelledEvent>;

export interface RideCompletedEventObject {
  rider: string;
  rideId: BigNumber;
}
export type RideCompletedEvent = TypedEvent<
  [string, BigNumber],
  RideCompletedEventObject
>;

export type RideCompletedEventFilter = TypedEventFilter<RideCompletedEvent>;

export interface RideRequestedEventObject {
  rider: string;
  rideId: BigNumber;
  fare: BigNumber;
}
export type RideRequestedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  RideRequestedEventObject
>;

export type RideRequestedEventFilter = TypedEventFilter<RideRequestedEvent>;

export interface UserRegisteredEventObject {
  user: string;
}
export type UserRegisteredEvent = TypedEvent<
  [string],
  UserRegisteredEventObject
>;

export type UserRegisteredEventFilter = TypedEventFilter<UserRegisteredEvent>;

export interface RideHailing extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RideHailingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptRide(
      _rideId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancelRide(
      _rideId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    completeRide(
      _rideId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getPricePerMeter(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRide(
      _rideId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [RideHailing.RideStructOutput] & { ride: RideHailing.RideStructOutput }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pricePerMeter(overrides?: CallOverrides): Promise<[BigNumber]>;

    registerUser(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registeredUsers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    requestRide(
      _distance: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rideCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    rides(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, boolean] & {
        rider: string;
        driver: string;
        fare: BigNumber;
        rideCompleted: boolean;
      }
    >;

    setPricePerMeter(
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  acceptRide(
    _rideId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancelRide(
    _rideId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  completeRide(
    _rideId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getPricePerMeter(overrides?: CallOverrides): Promise<BigNumber>;

  getRide(
    _rideId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<RideHailing.RideStructOutput>;

  owner(overrides?: CallOverrides): Promise<string>;

  pricePerMeter(overrides?: CallOverrides): Promise<BigNumber>;

  registerUser(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registeredUsers(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  requestRide(
    _distance: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rideCount(overrides?: CallOverrides): Promise<BigNumber>;

  rides(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, boolean] & {
      rider: string;
      driver: string;
      fare: BigNumber;
      rideCompleted: boolean;
    }
  >;

  setPricePerMeter(
    newPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptRide(
      _rideId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelRide(
      _rideId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    completeRide(
      _rideId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getPricePerMeter(overrides?: CallOverrides): Promise<BigNumber>;

    getRide(
      _rideId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<RideHailing.RideStructOutput>;

    owner(overrides?: CallOverrides): Promise<string>;

    pricePerMeter(overrides?: CallOverrides): Promise<BigNumber>;

    registerUser(overrides?: CallOverrides): Promise<void>;

    registeredUsers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    requestRide(
      _distance: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    rideCount(overrides?: CallOverrides): Promise<BigNumber>;

    rides(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, boolean] & {
        rider: string;
        driver: string;
        fare: BigNumber;
        rideCompleted: boolean;
      }
    >;

    setPricePerMeter(
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "RideAccepted(address,uint256)"(
      driver?: PromiseOrValue<string> | null,
      rideId?: PromiseOrValue<BigNumberish> | null
    ): RideAcceptedEventFilter;
    RideAccepted(
      driver?: PromiseOrValue<string> | null,
      rideId?: PromiseOrValue<BigNumberish> | null
    ): RideAcceptedEventFilter;

    "RideCancelled(address,uint256)"(
      rider?: PromiseOrValue<string> | null,
      rideId?: PromiseOrValue<BigNumberish> | null
    ): RideCancelledEventFilter;
    RideCancelled(
      rider?: PromiseOrValue<string> | null,
      rideId?: PromiseOrValue<BigNumberish> | null
    ): RideCancelledEventFilter;

    "RideCompleted(address,uint256)"(
      rider?: PromiseOrValue<string> | null,
      rideId?: PromiseOrValue<BigNumberish> | null
    ): RideCompletedEventFilter;
    RideCompleted(
      rider?: PromiseOrValue<string> | null,
      rideId?: PromiseOrValue<BigNumberish> | null
    ): RideCompletedEventFilter;

    "RideRequested(address,uint256,uint256)"(
      rider?: PromiseOrValue<string> | null,
      rideId?: PromiseOrValue<BigNumberish> | null,
      fare?: null
    ): RideRequestedEventFilter;
    RideRequested(
      rider?: PromiseOrValue<string> | null,
      rideId?: PromiseOrValue<BigNumberish> | null,
      fare?: null
    ): RideRequestedEventFilter;

    "UserRegistered(address)"(
      user?: PromiseOrValue<string> | null
    ): UserRegisteredEventFilter;
    UserRegistered(
      user?: PromiseOrValue<string> | null
    ): UserRegisteredEventFilter;
  };

  estimateGas: {
    acceptRide(
      _rideId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancelRide(
      _rideId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    completeRide(
      _rideId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getPricePerMeter(overrides?: CallOverrides): Promise<BigNumber>;

    getRide(
      _rideId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pricePerMeter(overrides?: CallOverrides): Promise<BigNumber>;

    registerUser(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registeredUsers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    requestRide(
      _distance: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rideCount(overrides?: CallOverrides): Promise<BigNumber>;

    rides(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setPricePerMeter(
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptRide(
      _rideId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancelRide(
      _rideId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    completeRide(
      _rideId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getPricePerMeter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRide(
      _rideId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pricePerMeter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerUser(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registeredUsers(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    requestRide(
      _distance: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rideCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rides(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setPricePerMeter(
      newPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
